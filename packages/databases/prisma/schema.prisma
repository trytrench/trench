// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model List {
  id        String     @id @default(dbgenerated("nanoid()"))
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  name      String
  alias     String     @unique
  // createdBy String
  items     ListItem[]
}

model ListItem {
  id        String   @id @default(dbgenerated("nanoid()"))
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  value     String
  listId    String
  list      List     @relation(fields: [listId], references: [id])
  // createdBy String

  @@unique([listId, value])
}

model Event {
  id        String   @id
  timestamp DateTime
  type      String
  data      Json     @default("{}")
  options   Json     @default("{}")

  @@index([timestamp])
}

model Feature {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  // Immutable
  schema Json

  eventType   EventType? @relation(fields: [eventTypeId], references: [id])
  eventTypeId String?

  entityType   EntityType? @relation(fields: [entityTypeId], references: [id])
  entityTypeId String?

  rule Rule?
}

model Rule {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String?
  color       String?

  feature   Feature @relation(fields: [featureId], references: [id])
  featureId String  @unique
}

model Decision {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?
  type        String
}

model EventViews {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  filters Json
}

model EntityViews {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  filters Json
}

model Node {
  id String @id @default(dbgenerated("nanoid()"))

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  eventTypeObj EventType @relation(fields: [eventType], references: [id])
  eventType    String

  snapshots NodeSnapshot[]
}

model NodeSnapshot {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  node   Node   @relation(fields: [nodeId], references: [id])
  nodeId String

  function   Function @relation(fields: [functionId], references: [id])
  functionId String

  dependsOn String[]
  inputs    Json

  executionEngines ExecutionEngineToNodeSnapshot[]
}

model Function {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  description  String?
  type         String
  config       Json
  returnSchema Json

  nodeSnapshots NodeSnapshot[]
}

model ExecutionEngineToNodeSnapshot {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nodeSnapshotId String
  nodeSnapshot   NodeSnapshot @relation(fields: [nodeSnapshotId], references: [id])

  executionEngineId String
  executionEngine   ExecutionEngine @relation(fields: [executionEngineId], references: [id])

  @@unique([nodeSnapshotId, executionEngineId])
}

model ExecutionEngine {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())

  nodeSnapshots ExecutionEngineToNodeSnapshot[]
}

enum GlobalStateKey {
  LastEventProcessedId
  ActiveEngineId
}

model GlobalState {
  key   GlobalStateKey @id
  value String
}

model EntityType {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  features Feature[]
  pages    EntityTypePage[]

  type String @unique
}

model EntityTypePage {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entityType   EntityType @relation(fields: [entityTypeId], references: [id])
  entityTypeId String

  config Json
}

model EventType {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  features Feature[]
  nodes    Node[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(dbgenerated("nanoid()"))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("nanoid()"))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(dbgenerated("nanoid()"))
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
