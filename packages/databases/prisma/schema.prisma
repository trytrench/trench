// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Event {
  id        String   @id
  timestamp DateTime
  type      String
  data      Json     @default("{}")
  options   Json     @default("{}")


  @@index([timestamp])
}


// Once an FeatureDef is created, only the name can be modified.
// The type and dataType are immutable.
model FeatureDef {
  id String @id @default(dbgenerated("nanoid()"))

  type     String
  name     String
  dataType String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  snapshots FeatureDefSnapshot[]
}

model FeatureDefSnapshot {
  id String @id @default(dbgenerated("nanoid()"))

  deps   String[]
  config Json

  createdAt DateTime @default(now())

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  featureDef   FeatureDef @relation(fields: [featureDefId], references: [id], onDelete: Cascade)
  featureDefId String

  executionEngines ExecutionEngineToFeatureDefSnapshot[]
}


model ExecutionEngineToFeatureDefSnapshot {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  featureDefSnapshotId String
  featureDefSnapshot   FeatureDefSnapshot @relation(fields: [featureDefSnapshotId], references: [id])

  executionEngineId String
  executionEngine   ExecutionEngine @relation(fields: [executionEngineId], references: [id])

  @@unique([featureDefSnapshotId, executionEngineId])
}

model ExecutionEngine {
  id        String     @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())

  featureDefSnapshots ExecutionEngineToFeatureDefSnapshot[]  

}

enum GlobalStateKey {
  LastEventProcessedId
  ActiveEngineId
}

model GlobalState {
  key   GlobalStateKey @id
  value String
}
model EntityType {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type String

  featureOrder String[]
  ruleOrder    String[]
  features     EntityFeature[]

  nameFeature   EntityFeature? @relation("NameFeature", fields: [nameFeatureId], references: [id])
  nameFeatureId String?        @unique

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@unique([type, projectId])
}

model EventType {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type String

  featureOrder String[]
  ruleOrder    String[]
  features     EventFeature[]

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@unique([type, projectId])
}

model EntityFeature {
  id String @id @default(dbgenerated("nanoid()"))

  entityType   EntityType @relation(fields: [entityTypeId], references: [id])
  entityTypeId String

  feature   Feature @relation(fields: [featureId], references: [id])
  featureId String

  name  String?
  color String?

  nameFeatureEntityType EntityType? @relation("NameFeature")

  @@unique([entityTypeId, featureId])
}

model EventFeature {
  id String @id @default(dbgenerated("nanoid()"))

  eventType   EventType @relation(fields: [eventTypeId], references: [id])
  eventTypeId String

  feature   Feature @relation(fields: [featureId], references: [id])
  featureId String

  name  String?
  color String?

  @@unique([eventTypeId, featureId])
}

model Feature {
  id       String  @id @default(dbgenerated("nanoid()"))
  feature  String
  isRule   Boolean
  dataType String  @default("text")
  // name    String?
  // color   String?
  // hidden  Boolean @default(false)

  eventFeatures  EventFeature[]
  entityFeatures EntityFeature[]

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@unique([feature, projectId])
}


// Necessary for Next auth
model Account {
  id                String  @id @default(dbgenerated("nanoid()"))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("nanoid()"))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(dbgenerated("nanoid()"))
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


/// Old

// Once an EventHandler is created, it should never be modified
model Project {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique


  productionDatasetId BigInt?  @unique
  productionDataset   Dataset? @relation("productionDatasetProject", fields: [productionDatasetId], references: [id])

  eventHandlers EventHandler[]
  datasets      Dataset[]

  features    Feature[]
  eventTypes  EventType[]
  entityTypes EntityType[]

  featureDefs        FeatureDef[]
  featureDefSnapshot FeatureDefSnapshot[]
}


model EventHandler {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hash String

  code    Json
  message String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  assignments EventHandlerAssignment[]
}

model EventHandlerAssignment {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventHandlerId String
  eventHandler   EventHandler @relation(fields: [eventHandlerId], references: [id])

  datasetId BigInt
  dataset   Dataset @relation("datasetAssignments", fields: [datasetId], references: [id])

  currentDataset Dataset? @relation("currentDatasetAssignment")
}

// Below tables all belong to a dataset

enum DatasetType {
  PRODUCTION
  BACKTEST
}

model Dataset {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type     DatasetType
  isActive Boolean     @default(true)

  name        String
  description String?

  startTime DateTime?
  endTime   DateTime?

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  // Below: Event processing configuration and status

  lastEventLog   EventLog? @relation(fields: [lastEventLogId], references: [id])
  lastEventLogId String?

  currentEventHandlerAssignmentId String?                 @unique
  currentEventHandlerAssignment   EventHandlerAssignment? @relation("currentDatasetAssignment", fields: [currentEventHandlerAssignmentId], references: [id])

  eventHandlerAssignments EventHandlerAssignment[] @relation("datasetAssignments")

  productionProject Project? @relation("productionDatasetProject")
}

model EventLog {
  id        String   @id
  timestamp DateTime
  type      String
  data      Json     @default("{}")
  options   Json     @default("{}")

  datasets Dataset[]

  @@index([timestamp])
}
